{"version":3,"sources":["Components/HomePage/Login/InputRow.jsx","config.js","Components/HomePage/Login/handleSubmit.js","redux/actionTypes.js","Components/HomePage/Login/Login.jsx","redux/actions.js","Components/HomePage/HomePage.jsx","Components/Grid/AddCamera.jsx","Components/Grid/Player.jsx","Components/Grid/Grid.jsx","redux/reducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["InputRow","_ref","name","_ref$label","label","_ref$type","type","onChange","value","_ref$showLabel","showLabel","required","react_default","a","createElement","className","input","placeholder","undefined","e","target","baseUrl","handleSubmit","mode","username","password","rePassword","email","setError","LoginUser","fetch","concat","method","headers","Content-Type","body","JSON","stringify","toLowerCase","then","response","ok","status","json","data","cameras","console","log","catch","err","LOGIN_USER","LOGOUT_USER","ADD_NEW_CAMERA","connect","dispatch","ownProps","loginUser","_useState","useState","_useState2","Object","slicedToArray","setMode","_useState3","_useState4","setUsername","_useState5","_useState6","setPassword","_useState7","_useState8","setRePassword","_useState9","_useState10","setEmail","_useState11","_useState12","error","card","title","onClick","es_button","state","react_router","push","to","HomePage_Login_Login","addCamera","url","addNewCamera","onDone","setUrl","updateCameraInDb","Player","src","marginWidth","marginHeight","frameBorder","scrolling","allowFullScreen","length","showAddCamera","setShowAddCamera","Grid_AddCamera","map","camera","index","active","key","tooltip","shape","icon","size","defaultState","store","createStore","arguments","action","objectSpread","toConsumableArray","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","react_router_dom","exact","path","component","HomePage","Grid","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90b596f1.chunk.js","sourcesContent":["import React  from \"react\"\nimport {Input} from \"antd\"\nexport default function InputRow ({\n        name ,\n        label=name,\n        type = \"text\" ,\n        onChange ,\n        value ,\n        showLabel = false,\n        required=false})\n    {\n    return(\n        <div className={\"formRow\"}>\n            {showLabel && <label>{label}:</label>}\n            <Input\n                placeholder={showLabel ? undefined : label}\n                value={value}\n                type={type}\n                onChange={(e)=>{onChange(e.target.value)}}\n            />\n        </div>\n    )\n}\n\n//<input className={\"effect-9\"} placeholder={showLabel ? undefined : label} type={type} name={name} required={required} value={value} onChange={(e)=>{onChange(e.target.value)}}/>","export const baseUrl = process.env.NODE_ENV !== 'production' ? 'http://localhost:80' : \"\"","import {baseUrl} from '../../../config.js'\n// this function handle the submit button\nexport default (mode,username,password,rePassword,email,setError,LoginUser)=>{\n    //first we need to check if the user want to create user or to login\n    if(mode === \"Register\"){ // if he wants to login\n        if(password === rePassword){ // and the passwords are match\n            fetch(`${baseUrl}/api/newUser`,{ // we do a fetch to the server to create the user\n                method:\"POST\",\n                headers:{\n                    'Content-Type': 'application/json'\n                },\n                body:JSON.stringify({\n                    username:username.toLowerCase(),\n                    password,\n                    email\n                })\n            }).then((response)=>{\n                if(response.ok){ // if we got 200\n                    LoginUser(username,[])\n                }\n                else{ // if tere was an error\n                    if(response.status===406){ // if the user in use the server return 406\n                        setError(\"username in use\") //show it to the user\n                    }\n                    else{ // for any other error\n                        setError(\"unknown error\")\n                    }\n                }\n            })\n        }\n        else{ // if the password dont metch\n            setError(\"paswword not match\")\n        }\n    }\n    else{ // if the user wants to login\n        fetch(`${baseUrl}/api/login`,{ // send a request to the server for login\n            method:\"POST\",\n            headers:{\n                'Content-Type': 'application/json'\n            },\n            body:JSON.stringify({\n                username,\n                password\n            })\n        }).then(response=>{\n            if(response.ok){ // if its work fine we get back the cameras and the user name\n                response.json().then((data)=>{\n                    setError(\"\")\n                    LoginUser(data.username,data.cameras)\n                })\n            }\n            else{ // otherwise show the error\n                console.log(response)\n                if(response.status===401)\n                    setError(\"worng username or password\")\n                else{\n                    setError(\"unknown error\")\n                }\n            }\n        }).catch((err)=>{\n            setError(\"unknown error\")\n            console.log(err)}\n        )\n    }\n}","export const LOGIN_USER = 'LOGIN_USER'\nexport const LOGOUT_USER = 'LOGOUT_USER'\nexport const ADD_NEW_CAMERA = 'ADD_NEW_CAMERA'","import React , {useState} from \"react\"\nimport './Login.scss'\nimport './InputRow'\nimport {Card ,Button} from \"antd\"\nimport InputRow from \"./InputRow\";\nimport {connect} from 'react-redux'\nimport handleSubmit from './handleSubmit'\nimport {loginUser} from '../../../redux/actions'\n\nfunction Login ({LoginUser}){\n    const [mode,setMode] = useState(\"Login\")\n    const [username,setUsername] = useState(\"\")\n    const [password,setPassword] = useState(\"\")\n    const [rePassword,setRePassword] = useState(\"\")\n    const [email,setEmail] = useState(\"\")\n    const [error , setError] = useState(\"\")\n    return(\n        <Card title={mode} >\n            <div className={\"LoginRoot\"}>\n            <span className={\"errorSpan\"}>{error}</span>\n            <form>\n                <InputRow name={\"Username\"} value={username} onChange={setUsername} required/>\n                {mode===\"Register\" &&\n                    <InputRow name={\"Email\"} value={email} onChange={setEmail}/>\n                }\n                <InputRow name={\"Password\"} type={\"password\"} required value={password} onChange={setPassword}/>\n                {mode===\"Register\" &&\n                <InputRow name={\"rePassword\"} label={\"Re-type password\"} type={\"password\"} required value={rePassword} onChange={setRePassword}/>\n                }\n            </form>\n            <span className={\"accountChangeMode\"} onClick={()=>{setMode(mode==='Login' ? \"Register\" : \"Login\")}}>\n            {mode==='Login' ? 'Dont have an account?' : \"Already have an Account?\"}\n            </span>\n            <Button onClick={()=>{handleSubmit(mode,username,password,rePassword,email,setError,LoginUser)}}>{mode}</Button>\n            </div>\n        </Card>\n    )\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n    LoginUser: (username,cameras) => {\n        dispatch(loginUser(username,cameras))\n        }\n    }\n}\n\nexport default connect(()=>{},mapDispatchToProps)(Login)","import {LOGIN_USER , ADD_NEW_CAMERA} from './actionTypes'\n\nexport function loginUser (username,cameras){\n    return {\n        type:LOGIN_USER,\n        username,\n        cameras\n    }\n}\n\nexport function addNewCamera (url){\n    return {\n        type:ADD_NEW_CAMERA,\n        url\n    }\n}","import React from \"react\"\nimport \"./HomePage.scss\"\nimport Login from './Login/Login'\nimport {connect} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\nfunction HomePage({username}){\n    if (username){\n        return (<Redirect push to={'/grid'}/>)\n    }\n    else{\n        return(\n            <div className={\"HomePageRoot\"}>\n                <h1 className={\"HomePageHeader\"}>Best Camera Out There</h1>\n                <Login/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        username: state.username\n    }\n}\n\nexport default connect(mapStateToProps)(HomePage)","import React , {useState} from 'react';\nimport {Card ,Input ,Button} from 'antd'\nimport {connect} from 'react-redux';\nimport {addNewCamera} from '../../redux/actions'\nimport {baseUrl} from '../../config'\nfunction AddCamera ({addCamera , username , onDone}){\n    const [url, setUrl] = useState(\"\")\n    return(\n        <div className={'AddCamera'}>\n            <Card title=\"Add New Camera\">\n                <div className={\"cardContainer\"}>\n                    <div>\n                        <Input placeholder={\"Camera url\"} value={url} onChange={(e)=>{setUrl(e.target.value)}}/>\n                    </div>\n                    <div className={\"buttons\"}>\n                        <Button onClick={()=>{setUrl('rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov')}}> use Example </Button>\n                        <Button type=\"primary\" onClick={\n                            ()=>{\n                                addCamera(url)\n                                updateCameraInDb(url,username)\n                                onDone()\n                            }}>Add camera</Button>\n                    </div>\n                </div>\n            </Card>\n        </div>\n    )\n}\nconst mapDispatchToProps = (dispatch, ownProps)=>{\n    return{\n        addCamera:(url)=>{\n            dispatch(addNewCamera(url))\n        }\n    }\n}\n\nconst mapStateToProps = (state , ownProps)=>{\n    return{\n        username:state.username\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(AddCamera)\n\nfunction updateCameraInDb (url,username){\n    fetch(`${baseUrl}/api/addCamera`,{ // we do a fetch to the server to create the user\n        method:\"POST\",\n        headers:{\n            'Content-Type': 'application/json'\n        },\n        body:JSON.stringify({\n            username:username.toLowerCase(),\n            url\n        })\n    })\n}","import React from 'react'\n\nexport default function Player({url , title}){\n    return(\n                <iframe\n                src={`https://wcs5-eu.flashphoner.com:8888/embed_player?urlServer=&streamName=${url}&mediaProviders=WebRTC,Flash,MSE,WSPlayer`}\n                marginWidth='0'\n                marginHeight='0'\n                frameBorder='0'\n                scrolling='no'\n                allowFullScreen='allowfullscreen'\n                title={title}\n                className={\"playerContainer\"}\n                    >\n                </iframe>\n    )\n}\n\n// export default function box (){\n//     return(\n//         <div className={\"playerContainer\"}>\n//         </div>\n//     )\n// }\n\n//width='100%'\n//height='100%'","import React ,{useState} from 'react'\nimport {connect} from 'react-redux'\nimport AddCamera from './AddCamera'\nimport {Redirect} from 'react-router-dom'\nimport Player from \"./Player\"\nimport {Button , Tooltip} from 'antd'\nimport './Grid.scss'\nfunction Grid({cameras,username}){\n    const [showAddCamera,setShowAddCamera] = useState(cameras.length ? false : true)\n    if(!username){\n        return(\n            <Redirect to={'/'}/>\n        )\n    }\n    return(\n        <div className={\"Grid\"}>\n        {\n            !showAddCamera ?\n            <div className={\"videoGridContainer\"}>\n            {cameras.map((camera,index)=>{\n                if(camera.active)\n                    return(<Player url={camera.url} key={index} title={index}/>)\n                })}\n            </div>\n            :\n                <AddCamera onDone={setShowAddCamera}/>\n        }\n        {!showAddCamera && \n            <div className={\"floatingButton\"}>\n                <Tooltip title=\"add new camera\">\n                    <Button type=\"primary\" shape=\"circle\" icon=\"plus\" size={\"large\"} onClick={()=>{setShowAddCamera(true)}}/>\n                </Tooltip>\n            </div>}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        cameras: state.cameras,\n        username:state.username\n    }\n}\n\nexport default connect(mapStateToProps)(Grid)","import {LOGIN_USER , LOGOUT_USER , ADD_NEW_CAMERA} from './actionTypes'\nconst defaultState = {\n    username:null,\n    cameras:[]\n}\n\nexport default function store(state = defaultState , action){\n    switch (action.type){\n        case LOGIN_USER:\n            return{\n                ...state,\n                username:action.username,\n                cameras:action.cameras\n            }\n        case LOGOUT_USER:\n            return defaultState\n        case ADD_NEW_CAMERA:\n            return{\n                ...state,\n                cameras:[\n                    ...state.cameras,\n                    {\n                        url:action.url,\n                        active:true\n                    }\n                ]\n            }\n        default: return state\n    }\n}","import {createStore} from 'redux'\nimport reducer from './reducer'\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nexport default store","import React from 'react';\nimport \"antd/dist/antd.css\";\nimport HomePage from './Components/HomePage/HomePage'\nimport Grid from './Components/Grid/Grid'\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n            <Route exact path=\"/\" component={HomePage} />\n            <Route path=\"/grid\" component={Grid} />\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}